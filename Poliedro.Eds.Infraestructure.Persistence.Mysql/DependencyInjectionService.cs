using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Poliedro.Eds.Domain.Court.DomainService;
using Poliedro.Eds.Domain.Business.DomainBusiness;
using Poliedro.Eds.Domain.Capacity.DomainCapacity;
using Poliedro.Eds.Domain.Eds.DomainEds;
using Poliedro.Eds.Domain.Provider.DomainProvider;
using Poliedro.Eds.Domain.Dispensers.DomainDispensers;
using Poliedro.Eds.Domain.DispenserType.DomainDispenserType;
using Poliedro.Eds.Domain.Hose.DomainHose;
using Poliedro.Eds.Domain.HoseHistory.DomainHoseHistory;
using Poliedro.Eds.Domain.Islander.DomainIslander;
using Poliedro.Eds.Domain.Ports;
using Poliedro.Eds.Domain.Product.DomainProduct;
using Poliedro.Eds.Domain.ProductCompartiment.DomainProductCompartiment;
using Poliedro.Eds.Domain.ProductType.DomainProductType;
using Poliedro.Eds.Domain.Shopping.DomainShopping;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Context;
using Poliedro.Eds.Domain.ShoppingProduct.DomainShoppingProduct;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Adapter;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Business.DomainBusiness.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Capacity.DomainCapacity.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Eds.DomainEds.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Provider.DomainProvider.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Dispensers.DomainDispensers.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Court.Repositories;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.DispenserType.DomainDispenserType.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Hose.DomainHose.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.HoseHistory.DomainHoseHistory.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Islander.Domainislander.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Islander.DomainIslander.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Product.DomainProduct.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.ProductCompartiment.DomainProductCompartiment.Impl;
using Poliedro.Eds.Domain.EdsTank.DomainEdsTank;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.EdsTank.DomainEdsTank.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.ProductType.DomainProductType.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Shopping.DomainShopping.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.ShoppingProduct.DomainShopping.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Tank.DomainTank.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.ShoppingProduct.DomainShoppingProduct.Impl;
using Poliedro.Eds.Domain.Tank.DomainTank;
using Poliedro.Eds.Domain.Expenditures.DomainExpenditures;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Expenditures.DomainExpenditures.Impl;
using Poliedro.Eds.Domain.TypeOfCollection.DomainTypeOfCollection;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.TypeOfCollection.DomainTypeOfCollection.Impl;
using Poliedro.Eds.Domain.ShoppingProductInventory.DomainShoppingProductInventory;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.ShoppingProductInventory.DomainShoppingProductInventory.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Compartiment.DomainCompartiment.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Category.DomainCategory.Impl;
using Poliedro.Eds.Domain.Category.DomainCategory;
using Poliedro.Eds.Domain.CourtDispensersInventory.DomainCourtDispensersInventory;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.CourtDispensersInventory.DomainCourtDispensersInventory.Impl;
using Poliedro.Eds.Domain.CompartimentCapacity.DomainCompartimentCapacity;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.CompartimentCapacity.DomainCompartimentCapacity.Impl;
using Poliedro.Eds.Application.Ports.Redis;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Redis;
using Poliedro.Eds.Domain.Compartiment.DomainCompartiment;
using Poliedro.Eds.Domain.Island.DomainIsland;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Island.Domainisland.Impl;
using Poliedro.Eds.Infraestructure.Persistence.Mysql.Island.DomainIsland.Impl;

namespace Poliedro.Eds.Infraestructure.Persistence.Mysql;

public static class DependencyInjectionService
{
    public static IServiceCollection AddPersistence(this IServiceCollection services, IConfiguration configuration)
    {
        var connectionString = Environment.GetEnvironmentVariable("MYSQL_CONNECTION") ?? configuration.GetConnectionString("MysqlConnection");
        services.AddDbContext<DataBaseContext>(
            options => options.UseMySql(connectionString, ServerVersion.AutoDetect(connectionString)
        ));

        services.AddTransient<IMessageProvider, MessageProvider>();
        services.AddTransient<ICourtDomainService, CourtCreateService>();
        services.AddTransient<ICourtGetByIdDomainService, CourtGetByIDService>();
        services.AddTransient<ICourtUpdateService, CourtUpdateService>();
        services.AddScoped<IBusinessCreateService, BusinessCreateService>();
        services.AddScoped<IBusinessGetByIdService, BusinessGetByIdService>();
        services.AddScoped<IBusinessGetAllService, BusinessGetAllService>();
        services.AddScoped<IBusinessUpdateService, BusinessUpdateService>();
        services.AddScoped<ICapacityCreateService, CapacityCreateService>();
        services.AddScoped<ICapacityGetByIdService, CapacityGetByIdService>();
        services.AddScoped<ICapacityGetAllService, CapacityGetAllService>();
        services.AddScoped<ICapacityUpdateService, CapacityUpdateService>();
        services.AddScoped<IEdsCreateService, EdsCreateService>();
        services.AddScoped<IEdsGetByIdService, EdsGetByIdService>();
        services.AddScoped<IEdsGetAllService, EdsGetAllService>();
        services.AddScoped<IEdsUpdateService, EdsUpdateService>();
        services.AddScoped<IProviderCreateService, ProviderCreateService>();
        services.AddScoped<IProviderGetByIdService, ProviderGetByIdService>();
        services.AddScoped<IProviderGetAllService, ProviderGetAllService>();
        services.AddScoped<IProviderUpdateService, ProviderUpdateService>();
        services.AddScoped<IProductTypeCreateProductType, ProductTypeCreateProductType>();
        services.AddScoped<IProductTypeGetAllProductType, ProductTypeGetAllProductType>();
        services.AddScoped<IProductTypeGetByIdProductType, ProductTypeGetByIdProductType>();
        services.AddScoped<IProductTypeUpdateProductType, ProductTypeUpdateProductType>();
        services.AddScoped<IProductCreateProduct, ProductCreateProduct>();
        services.AddScoped<IProductGetAllProduct, ProductGetAllProduct>();
        services.AddScoped<IProductGetByIdProduct, ProductGetByIdProduct>();
        services.AddScoped<IProductUpdateProduct, ProductUpdateProduct>();
        services.AddScoped<IProductCompartimentCreateProductCompartiment, ProductCompartimentCreateProductCompartiment>();
        services.AddScoped<IProductCompartimentGetAllProductCompartiment, ProductCompartimentGetAllProductCompartiment>();
        services.AddScoped<IProductCompartimentGetByIdProductCompartiment, ProductCompartimentGetByIdProductCompartiment>();
        services.AddScoped<IProductCompartimentUpdateProductCompartiment, ProductCompartimentUpdateProductCompartiment>();
        services.AddScoped<IEdsTankCreateEdsTank, EdsTankCreateEdsTank>();
        services.AddScoped<IEdsTankGetAllEdsTank, EdsTankGetAllEdsTank>();
        services.AddScoped<IEdsTankGetByIdEdsTank, EdsTankGetByIdEdsTank>();
        services.AddScoped<IEdsTankUpdateEdsTank, EdsTankUpdateEdsTank>();
        services.AddScoped<IExpendituresCreateExpenditures, ExpendituresCreateExpenditures>();
        services.AddScoped<IExpendituresGetAllExpenditures, ExpendituresGetAllExpenditures>();
        services.AddScoped<IExpendituresGetByIdExpenditures, ExpendituresGetByIdExpenditures>();
        services.AddScoped<IExpendituresUpdateExpenditures, ExpendituresUpdateExpenditures>();
        services.AddScoped<ITypeOfCollectionCreateTypeOfCollection, TypeOfCollectionCreateTypeOfCollection>();
        services.AddScoped<ITypeOfCollectionGetAllTypeOfCollection, TypeOfCollectionGetAllTypeOfCollection>();
        services.AddScoped<ITypeOfCollectionGetByIdTypeOfCollection, TypeOfCollectionGetByIdTypeOfCollection>();
        services.AddScoped<ITypeOfCollectionUpdateTypeOfCollection, TypeOfCollectionUpdateTypeOfCollection>();
        services.AddScoped<ICompartimentCapacityCreateCompartimentCapacity, CompartimentCapacityCreateCompartimentCapacity>();
        services.AddScoped<ICompartimentCapacityGetAllCompartimentCapacity, CompartimentCapacityGetAllCompartimentCapacity>();
        services.AddScoped<ICompartimentCapacityGetByIdCompartimentCapacity, CompartimentCapacityGetByIdCompartimentCapacity>();
        services.AddScoped<ICompartimentCapacityUpdateCompartimentCapacity, CompartimentCapacityUpdateCompartimentCapacity>();
        services.AddScoped<IIslanderCreateIslander, IslanderCreateIslander>();
        services.AddScoped<IIslanderUpdateIslander, IslanderUpdateIslander>();
        services.AddScoped<IIslanderGetByIdIslander, IslanderGetByIdIslander>();
        services.AddScoped<IIslanderGetAllIslander, IslanderGetAllIslander>();
        services.AddScoped<IIslandCreateIsland, IslandCreateIsland>();
        services.AddScoped<IIslandUpdateIsland, IslandUpdateIsland>();
        services.AddScoped<IIslandGetByIdIsland, IslandGetByIdIsland>();
        services.AddScoped<IIslandGetAllIsland, IslandGetAllIsland>();
        services.AddScoped<IDispensersCreateDispensers, DispensersCreateDispensers>();
        services.AddScoped<IDispensersUpdateDispensers, DispensersUpdateDispensers>();
        services.AddScoped<IDispensersGetByIdDispensers, DispensersGetByIdDispensers>();
        services.AddScoped<IDispensersGetAllDispensers, DispensersGetAllDispensers>();
        services.AddScoped<IHoseCreateHose, HoseCreateHose>();
        services.AddScoped<IHoseUpdateHose, HoseUpdateHose>();
        services.AddScoped<IHoseGetByIdHose, HoseGetByIdHose>();
        services.AddScoped<IHoseGetAllHose, HoseGetAllHose>();
        services.AddScoped<ILastAccumulatedService, LastAccumulatedService>();
        services.AddScoped<IDispenserTypeCreateDispenserType, DispenserTypeCreateDispenserType>();
        services.AddScoped<IDispenserTypeUpdateDispenserType, DispenserTypeUpdateDispenserType>();
        services.AddScoped<IDispenserTypeGetByIdDispenserType, DispenserTypeGetByIdDispenserType>();
        services.AddScoped<IDispenserTypeGetAllDispenserType, DispenserTypeGetAllDispenserType>();
        services.AddScoped<IHoseHistoryCreateHoseHistory, HoseHistoryCreateHoseHistory>();
        services.AddScoped<IHoseHistoryUpdateHoseHistory, HoseHistoryUpdateHoseHistory>();
        services.AddScoped<IHoseHistoryGetByIdHoseHistory, HoseHistoryGetByIdHoseHistory>();
        services.AddScoped<IHoseHistoryGetAllHoseHistory, HoseHistoryGetAllHoseHistory>();
        services.AddScoped<IShoppingCreateShopping, ShoppingCreateShopping>();
        services.AddScoped<IShoppingUpdateShopping, ShoppingUpdateShopping>();
        services.AddScoped<IShoppingGetByIdShopping, ShoppingGetByIdShopping>();
        services.AddScoped<IShoppingGetAllShopping, ShoppingGetAllShopping>();
        services.AddScoped<IShoppingProductCreateShoppingProduct, ShoppingProductCreateShoppingProduct>();
        services.AddScoped<IShoppingProductUpdateShoppingProduct, ShoppingProductUpdateShoppingProduct>();
        services.AddScoped<IShoppingProductGetByIdShoppingProduct,ShoppingProductGetByIdShoppingProduct>();
        services.AddScoped<IShoppingProductGetAllShoppingProduct, ShoppingProductGetAllShoppingProduct>();
        services.AddScoped<IShoppingCreateShoppingProductInventory, ShoppingProductCreateShoppingProductInventory>();
        services.AddScoped<IShoppingUpdateShoppingProductInventory, ShoppingProductUpdateShoppingProductInventory>();
        services.AddScoped<IShoppingProductInventoryGetAll, ShoppingProductInventoryGetAll>();
        services.AddScoped<IShoppingProductInventoryGetById, ShoppingProductInventoryGetById>();
        services.AddScoped<ITankCreateTank, TankCreateTank>();
        services.AddScoped<ITankUpdateTank, TankUpdateTank>();
        services.AddScoped<ITankGetByIdTank, TankGetByIdTank>();
        services.AddScoped<ITankGetAllTank, TankGetAllTank>();
        services.AddScoped<ICompartimentCreateCompartiment, CompartimentCreateCompartiment>();
        services.AddScoped<ICompartimentUpdateCompartiment, CompartimentUpdateCompartiment>();
        services.AddScoped<ICompartimentGetByIdCompartiment, CompartimentGetByIdCompartiment>();
        services.AddScoped<ICompartimentGetAllCompartiment, CompartimentGetAllCompartiment>();
        services.AddScoped<ICourtDispensersInventoryCreateCourtDispensersInventory, CourtDispensersInventoryCreateCourtDispensersInventory>();
        services.AddScoped<ICourtDispensersInventoryUpdateCourtDispensersInventory, CourtDispensersInventoryUpdateCourtDispensersInventory>();
        services.AddScoped<ICourtDispensersInventoryGetByIdCourtDispensersInventory, CourtDispensersInventoryGetByIdCourtDispensersInventory>();
        services.AddScoped<ICourtDispensersInventoryGetAllCourtDispensersInventory, CourtDispensersInventoryGetAllCourtDispensersInventory>();
        services.AddScoped<ICategoryCreateCategory, CategoryCreateCategory>();
        services.AddScoped<ICategoryUpdateCategory, CategoryUpdateCategory>();
        services.AddScoped<ICategoryGetByIdCategory, CategoryGetByIdCategory>();
        services.AddScoped<ICategoryGetAllCategory, CategoryGetAllCategory>();
        services.AddScoped<ICourtUpdateInventoryService, CourtInventoryService>();
        services.AddSingleton<IRedisService, RedisCacheService>();
        return services;
    }
}
