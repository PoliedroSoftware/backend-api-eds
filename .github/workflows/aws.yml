name: Build, Test, Deploy to ECS

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - 'release/*'          
      - 'releasecandidate/*'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest  # Usamos un runner de Ubuntu

    environment: QA  # Especifica el entorno QA

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Setup .NET SDK
      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v2
        with:
          dotnet-version: '8.0.x'
          
      # Step 3.5: SonarQube Scan
      - name: SonarQube Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
          
      # Step 3: Restore dependencies
      - name: Restore dependencies
        run: dotnet restore

      # Step 4: Build the project
      - name: Build the project
        run: dotnet build --configuration Release

      # Step 5: Run unit tests
      - name: Run unit tests
        run: dotnet test --configuration Release --no-build

      # Step 6: Set AWS region from Secrets
      - name: Set AWS region
        run: |
          aws configure set region ${{ secrets.AWS_REGION }}  # Usar la región configurada en Secrets
          
      # Step 7: Configure AWS credentials from Secrets
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 8: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 9: Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest .

      # Step 10: Tag Docker image
      - name: Tag Docker image
        run: |
          docker tag ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 11: Push Docker image to ECR
      - name: Push Docker image to ECR
        run: |
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ secrets.ECR_REPOSITORY }}:latest

      # Step 12: Deploy to Amazon ECS using existing task definition
      - name: Deploy to Amazon ECS
        run: |
          # Usar el ARN de la task definition desde Secrets
          ecs_task_definition_arn="${{ secrets.TASK_DEFINITION_ARN }}"
          echo "Usando el ARN de la task definition: $ecs_task_definition_arn"
          
          # Forzar la actualización del servicio con la task definition existente
          ecs_deploy=$(aws ecs update-service \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --service ${{ secrets.AWS_ECS_SERVICE }} \
            --task-definition $ecs_task_definition_arn \
            --force-new-deployment)
          
          echo "Resultado del despliegue en ECS: $ecs_deploy"

      # Step 13: Verify ECS service status
      - name: Check ECS Service Status
        run: |
          # Verifica el estado del servicio
          service_status=$(aws ecs describe-services \
            --cluster ${{ secrets.AWS_ECS_CLUSTER }} \
            --services ${{ secrets.AWS_ECS_SERVICE }} \
            --query 'services[0].status' --output text)
          
          echo "Estado del servicio: $service_status"

      # Step 14: Verify ECS Task Definition
      - name: Check ECS Task Definition
        run: |
          # Verifica la imagen de la task definition
          task_definition_image=$(aws ecs describe-task-definition \
            --task-definition ${{ secrets.TASK_DEFINITION_ARN }} \
            --query 'taskDefinition.containerDefinitions[0].image' --output text)
          
          echo "Imagen de la task definition: $task_definition_image"
